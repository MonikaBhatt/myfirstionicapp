{
  "_args": [
    [
      {
        "raw": "bonjour@github:resin-io/bonjour",
        "scope": null,
        "escapedName": "bonjour",
        "name": "bonjour",
        "rawSpec": "github:resin-io/bonjour",
        "spec": "github:resin-io/bonjour",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:resin-io/bonjour.git",
          "sshUrl": "git+ssh://git@github.com/resin-io/bonjour.git",
          "httpsUrl": "git+https://github.com/resin-io/bonjour.git",
          "gitUrl": "git://github.com/resin-io/bonjour.git",
          "shortcut": "github:resin-io/bonjour",
          "directUrl": "https://raw.githubusercontent.com/resin-io/bonjour/master/package.json"
        }
      },
      "F:\\express\\backend\\node_modules\\@ionic\\app-scripts"
    ]
  ],
  "_from": "resin-io/bonjour",
  "_id": "bonjour@3.5.0",
  "_inCache": true,
  "_location": "/bonjour",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bonjour@github:resin-io/bonjour",
    "scope": null,
    "escapedName": "bonjour",
    "name": "bonjour",
    "rawSpec": "github:resin-io/bonjour",
    "spec": "github:resin-io/bonjour",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:resin-io/bonjour.git",
      "sshUrl": "git+ssh://git@github.com/resin-io/bonjour.git",
      "httpsUrl": "git+https://github.com/resin-io/bonjour.git",
      "gitUrl": "git://github.com/resin-io/bonjour.git",
      "shortcut": "github:resin-io/bonjour",
      "directUrl": "https://raw.githubusercontent.com/resin-io/bonjour/master/package.json"
    }
  },
  "_requiredBy": [
    "/@ionic/app-scripts"
  ],
  "_resolved": "git://github.com/resin-io/bonjour.git#31d080cee1d8a4b74e03818aaee14da8062f0ea1",
  "_shasum": "82c36e2650e4d393341472af75920aac250fa52c",
  "_shrinkwrap": null,
  "_spec": "bonjour@github:resin-io/bonjour",
  "_where": "F:\\express\\backend\\node_modules\\@ionic\\app-scripts",
  "author": {
    "name": "Thomas Watson Steen",
    "email": "w@tson.dk",
    "url": "https://twitter.com/wa7son"
  },
  "bugs": {
    "url": "https://github.com/watson/bonjour/issues"
  },
  "coordinates": [
    55.68250900965318,
    12.586377442991648
  ],
  "dependencies": {
    "array-flatten": "^2.1.0",
    "deep-equal": "^1.0.1",
    "dns-equal": "^1.0.0",
    "dns-txt": "^2.0.2",
    "multicast-dns": "^6.0.1",
    "multicast-dns-service-types": "^1.1.0"
  },
  "description": "A Bonjour/Zeroconf implementation in pure JavaScript",
  "devDependencies": {
    "after-all": "^2.0.2",
    "standard": "^7.0.1",
    "tape": "^4.5.1"
  },
  "gitHead": "31d080cee1d8a4b74e03818aaee14da8062f0ea1",
  "homepage": "https://github.com/watson/bonjour",
  "keywords": [
    "bonjour",
    "zeroconf",
    "zero",
    "configuration",
    "mdns",
    "dns",
    "service",
    "discovery",
    "multicast",
    "broadcast",
    "dns-sd"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "bonjour",
  "optionalDependencies": {},
  "readme": "# bonjour\r\n\r\nA Bonjour/Zeroconf protocol implementation in pure JavaScript. Publish\r\nservices on the local network or discover existing services using\r\nmulticast DNS.\r\n\r\n[![Build status](https://travis-ci.org/watson/bonjour.svg?branch=master)](https://travis-ci.org/watson/bonjour)\r\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\r\n\r\n## Installation\r\n\r\n```\r\nnpm install bonjour\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar bonjour = require('bonjour')()\r\n\r\n// advertise an HTTP server on port 3000\r\nbonjour.publish({ name: 'My Web Server', type: 'http', port: 3000 })\r\n\r\n// browse for all http services\r\nbonjour.find({ type: 'http' }, function (service) {\r\n  console.log('Found an HTTP server:', service)\r\n})\r\n```\r\n\r\n## API\r\n\r\n### Initializing\r\n\r\n```js\r\nvar bonjour = require('bonjour')([options])\r\n```\r\n\r\nThe `options` are optional and will be used when initializing the\r\nunderlying multicast-dns server. For details see [the multicast-dns\r\ndocumentation](https://github.com/mafintosh/multicast-dns#mdns--multicastdnsoptions).\r\n\r\n### Publishing\r\n\r\n#### `var service = bonjour.publish(options)`\r\n\r\nPublishes a new service.\r\n\r\nOptions are:\r\n\r\n- `name` (string)\r\n- `host` (string, optional) - defaults to local hostname\r\n- `port` (number)\r\n- `type` (string)\r\n- `subtypes` (array of strings, optional)\r\n- `protocol` (string, optional) - `udp` or `tcp` (default)\r\n- `txt` (object, optional) - a key/value object to broadcast as the TXT\r\n  record\r\n\r\nIANA maintains a [list of official service types and port\r\nnumbers](http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml).\r\n\r\n#### `bonjour.unpublishAll([callback])`\r\n\r\nUnpublish all services. The optional `callback` will be called when the\r\nservices have been unpublished.\r\n\r\n#### `bonjour.destroy()`\r\n\r\nDestroy the mdns instance. Closes the udp socket.\r\n\r\n### Browser\r\n\r\n#### `var browser = bonjour.find(options[, onup])`\r\n\r\nListen for services advertised on the network. An optional callback can\r\nbe provided as the 2nd argument and will be added as an event listener\r\nfor the `up` event.\r\n\r\nOptions (all optional):\r\n\r\n- `type` (string)\r\n- `subtypes` (array of strings)\r\n- `protocol` (string) - defaults to `tcp`\r\n- `txt` (object) - passed into [dns-txt\r\n  module](https://github.com/watson/dns-txt) contructor. Set to `{\r\n  binary: true }` if you want to keep the TXT records in binary\r\n\r\n#### `var browser = bonjour.findOne(options[, callback])`\r\n\r\nListen for and call the `callback` with the first instance of a service\r\nmatching the `options`. If no `callback` is given, it's expected that\r\nyou listen for the `up` event. The returned `browser` will automatically\r\nstop it self after the first matching service.\r\n\r\nOptions are the same as given in the `browser.find` function.\r\n\r\n#### `Event: up`\r\n\r\nEmitted every time a new service is found that matches the browser.\r\n\r\n#### `Event: down`\r\n\r\nEmitted every time an existing service emmits a goodbye message.\r\n\r\n#### `browser.services`\r\n\r\nAn array of services known by the browser to be online.\r\n\r\n#### `browser.start()`\r\n\r\nStart looking for matching services.\r\n\r\n#### `browser.stop()`\r\n\r\nStop looking for matching services.\r\n\r\n#### `browser.update()`\r\n\r\nBroadcast the query again.\r\n\r\n### Service\r\n\r\n#### `Event: up`\r\n\r\nEmitted when the service is up.\r\n\r\n#### `Event: error`\r\n\r\nEmitted if an error occurrs while publishing the service.\r\n\r\n#### `service.stop([callback])`\r\n\r\nUnpublish the service. The optional `callback` will be called when the\r\nservice have been unpublished.\r\n\r\n#### `service.start()`\r\n\r\nPublish the service.\r\n\r\n#### `service.name`\r\n\r\nThe name of the service, e.g. `Apple TV`.\r\n\r\n#### `service.type`\r\n\r\nThe type of the service, e.g. `http`.\r\n\r\n#### `service.subtypes`\r\n\r\nAn array of subtypes. Note that this property might be `null`.\r\n\r\n#### `service.protocol`\r\n\r\nThe protocol used by the service, e.g. `tcp`.\r\n\r\n#### `service.host`\r\n\r\nThe hostname or ip address where the service resides.\r\n\r\n#### `service.port`\r\n\r\nThe port on which the service listens, e.g. `5000`.\r\n\r\n#### `service.fqdn`\r\n\r\nThe fully qualified domain name of the service. E.g. if given the name\r\n`Foo Bar`, the type `http` and the protocol `tcp`, the `service.fqdn`\r\nproperty will be `Foo Bar._http._tcp.local`.\r\n\r\n#### `service.txt`\r\n\r\nThe TXT record advertised by the service (a key/value object). Note that\r\nthis property might be `null`.\r\n\r\n#### `service.published`\r\n\r\nA boolean indicating if the service is currently published.\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/watson/bonjour.git"
  },
  "scripts": {
    "test": "standard && tape test/*.js"
  },
  "version": "3.5.0"
}
